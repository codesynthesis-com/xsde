# file      : cxx/serializer/polyroot/buildfile
# license   : not copyrighted - public domain

if ($build.meta_operation != 'dist')
{
  assert ($polymorphic) \
    "config.xsde_examples.polymorphic should be set to true for this example"

  assert ($stl) \
    "config.xsde_examples.stl should be set to true for this example"

  assert ($iostream) \
    "config.xsde_examples.iostream should be set to true for this example"

  assert ($exceptions) \
    "config.xsde_examples.exceptions should be set to true for this example"

  assert ($reuse_style != 'none') \
    "config.xsde_examples.reuse_style should not be set to 'none' for this example"

  assert (!$custom_allocator || $default_allocator) \
    "config.xsde_examples.default_allocator should be set to true for this example"
}

import libs = libxsde%lib{xsde}

./: exe{driver} doc{README}

exe{driver}: {hxx     cxx}{* -supermen-simpl-* -supermen-sskel} \
             {hxx ixx cxx}{                     supermen-sskel}

exe{driver}: {hxx cxx}{supermen-simpl-tiein}: include = ($reuse_style == 'tiein')
exe{driver}: {hxx cxx}{supermen-simpl-mixin}: include = ($reuse_style == 'mixin')

exe{driver}: $libs

<{hxx ixx cxx}{supermen-sskel}>: xsd{supermen} map{supermen} $xsde
{{
  # For options contained in cxx_serializer_options variable see
  # build/root.build.
  #
  $xsde cxx-serializer $cxx_serializer_options \
        --generate-polymorphic	               \
        --type-map $path($<[1])	               \
        --output-dir $out_base                 \
        $path($<[0])
}}

cxx.poptions =+ "-I$out_base" "-I$src_base"
