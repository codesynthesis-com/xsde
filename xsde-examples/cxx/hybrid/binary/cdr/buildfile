# file      : cxx/hybrid/binary/cdr/buildfile
# license   : not copyrighted - public domain

if ($build.meta_operation != 'dist')
{
  assert ($cdr) \
    "config.xsde_examples.cdr should be set to true for this example"

  assert ($iostream) \
    "config.xsde_examples.iostream should be set to true for this example"

  assert ($exceptions) \
    "config.xsde_examples.exceptions should be set to true for this example"

  assert ($reuse_style != 'none') \
    "config.xsde_examples.reuse_style should not be set to 'none' for this example"

  assert (!$custom_allocator || $default_allocator) \
    "config.xsde_examples.default_allocator should be set to true for this example"
}

import libs  = libxsde%lib{xsde}
import libs += libace%lib{ACE}

./: exe{driver} doc{README}

exe{driver}: {hxx     cxx}{* -library -library-pskel -library-pimpl  \
                                      -library-sskel -library-simpl} \
             {hxx ixx cxx}{   library  library-pskel  library-sskel} \
             {hxx     cxx}{            library-pimpl  library-simpl} \
             $libs

exe{driver}: xml{library}: test.input = true

<{hxx ixx cxx}{library library-pskel library-sskel}                      \
 {hxx     cxx}{        library-pimpl library-simpl}>: xsd{library} $xsde
{{
  # For options contained in cxx_hybrid_options variable see build/root.build.
  #
  $xsde cxx-hybrid $cxx_hybrid_options \
        --generate-parser              \
        --generate-serializer          \
        --generate-aggregate           \
        --generate-insertion CDR       \
        --generate-extraction CDR      \
        --output-dir $out_base         \
        $path($<[0])
}}

cxx.poptions =+ "-I$out_base"
