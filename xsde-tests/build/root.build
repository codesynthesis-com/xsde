# file      : build/root.build
# license   : GNU GPL v2 + exceptions; see accompanying LICENSE file

cxx.std = latest

using cxx

hxx{*}: extension = hxx
ixx{*}: extension = ixx
txx{*}: extension = txx
cxx{*}: extension = cxx

skeleton = ($build.mode == 'skeleton')

# For the semantics of the following configuration variables refer to
# libxsde/build/root.build.
#
config [string] config.xsde_tests.encoding ?= 'utf8'
encoding = $config.xsde_tests.encoding

assert ($encoding == 'utf8' || $encoding == 'iso8859-1') \
  "invalid config.xsde_tests.encoding value '$encoding'"

config [bool] config.xsde_tests.stl ?= true
stl = $config.xsde_tests.stl

config [bool] config.xsde_tests.stl_iterator ?= true
stl_iterator = $config.xsde_tests.stl_iterator

config [bool] config.xsde_tests.iostream ?= true
iostream = $config.xsde_tests.iostream

config [bool] config.xsde_tests.exceptions ?= true
exceptions = $config.xsde_tests.exceptions

config [bool] config.xsde_tests.long_long ?= true
long_long = $config.xsde_tests.long_long

config [bool] config.xsde_tests.parser_validation ?= true
parser_validation = $config.xsde_tests.parser_validation

config [bool] config.xsde_tests.serializer_validation ?= true
serializer_validation = $config.xsde_tests.serializer_validation

config [bool] config.xsde_tests.regexp ?= true
regexp = $config.xsde_tests.regexp

config [string] config.xsde_tests.reuse_style ?= 'tiein'
reuse_style = $config.xsde_tests.reuse_style

assert ($reuse_style == 'mixin' || \
        $reuse_style == 'tiein' || \
        $reuse_style == 'none')    \
  "invalid config.xsde_tests.reuse_style value '$reuse_style'"

config [bool] config.xsde_tests.custom_allocator ?= false
custom_allocator = $config.xsde_tests.custom_allocator

config [bool] config.xsde_tests.default_allocator ?= false
default_allocator = $config.xsde_tests.default_allocator

assert (!$default_allocator || $custom_allocator) \
  "config.xsde_tests.default_allocator can only be true if config.xsde_tests.custom_allocator is true"

config [bool] config.xsde_tests.cdr ?= false
cdr = $config.xsde_tests.cdr

config [bool] config.xsde_tests.xdr ?= false
xdr = $config.xsde_tests.xdr

config [bool] config.xsde_tests.polymorphic ?= false
polymorphic = $config.xsde_tests.polymorphic

config [uint64] config.xsde_tests.parser_smap_buckets ?= 389
parser_smap_buckets = $config.xsde_tests.parser_smap_buckets

config [uint64] config.xsde_tests.parser_imap_buckets ?= 769
parser_imap_buckets = $config.xsde_tests.parser_imap_buckets

config [uint64] config.xsde_tests.serializer_smap_buckets ?= 389
serializer_smap_buckets = $config.xsde_tests.serializer_smap_buckets

config [uint64] config.xsde_tests.serializer_smap_bucket_buckets ?= 389
serializer_smap_bucket_buckets = $config.xsde_tests.serializer_smap_bucket_buckets

config [uint64] config.xsde_tests.serializer_imap_buckets ?= 769
serializer_imap_buckets = $config.xsde_tests.serializer_imap_buckets

config [bool] config.xsde_tests.external_expat ?= false
external_expat = $config.xsde_tests.external_expat

if! $skeleton
{
  define xsd: file
  xsd{*}: extension = xsd

  define xml: file
  xml{*}: extension = xml

  define map: file
  map{*}: extension = map

  if ($cxx.target.system == 'win32-msvc')
    cxx.poptions += -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS

  if ($cxx.class == 'msvc')
    cxx.coptions += /wd4251 /wd4275 /wd4800

  # Import xsde that we are testing.
  #
  import! [metadata] xsde = xsde%exe{xsde}

  # Every exe{} in this project is by default a test.
  #
  exe{*}: test = true

  # Specify the test target for cross-testing.
  #
  test.target = $cxx.target

  common_ops = --generate-inline                                       \
               --char-encoding $encoding                               \
               (!$stl                      ? --no-stl              : ) \
               (!$iostream                 ? --no-iostream         : ) \
               (!$exceptions               ? --no-exceptions       : ) \
               (!$long_long                ? --no-long-long        : ) \
               ( $reuse_style == 'mixin'   ? --reuse-style-mixin   : ) \
               ( $custom_allocator         ? --custom-allocator    : ) \
               ( $polymorphic              ? --runtime-polymorphic : )


  cxx_parser_options = $common_ops                                          \
                       --skel-file-suffix -pskel                            \
                       (!$parser_validation     ? --suppress-validation : ) \
                       ( $reuse_style == 'none' ? --reuse-style-none    : )

  cxx_hybrid_options = $common_ops                                              \
                       --pskel-file-suffix -pskel                               \
                       --pimpl-file-suffix -pimpl                               \
                       --sskel-file-suffix -sskel                               \
                       --simpl-file-suffix -simpl                               \
                       (!$parser_validation     ? --suppress-parser-val     : ) \
                       (!$serializer_validation ? --suppress-serializer-val : )

  cxx_serializer_options = $common_ops                                          \
                           --skel-file-suffix -sskel                            \
                           (!$serializer_validation ? --suppress-validation : ) \
                           ( $reuse_style == 'none' ? --reuse-style-none    : )
}
